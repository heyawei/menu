LESS基础语法
我们一起来学习一下LESS的基础语法，LESS的基础语法基本上分为以下几个方面：变量、混合(Mixins)、嵌套规则、运算、函数、作用域等。
这些基础语法需要我们先牢牢的掌握住，然后才可以灵活的在项目中进行实战。
变量:和JS中的变量一样，只是LESS的变量定义不是使用VAR而是使用@。
    //->LESS代码
    @link-color: #428bca;
    @link-color-hover: darken(@link-color, 10%);
    a {
        color: @link-color;
        &:hover {
            color: @link-color-hover;
        }
    }
    .box {
        color: @link-color;
    }
    //->编译为CSS的结果
    a {
        color: #428bca;
    }
    a:hover {
        color: #3071a9;
    }
    .box {
        color: #428bca;
    }
除了上述用变量存储公用的属性值，我们还可以用变量存储公用的URL、选择器等等.
    //->LESS代码
    .@{selector} {
        width: 100px;
        height: 100px;
        @{property}: #000;
        background: url("@{bgImg}/test.png");
        &:after {
            display: block;
            content: @@var;
        }
    }
    @selector: box;
    @bgImg: "../img";
    @property: color;
    @name: "珠峰培训";
    @var: "name";

    //->编译为CSS的结果
    .box {
        width: 100px;
        height: 100px;
        color: #000;
        background: url("../img/test.png");
    }

    .box:after {
        display: block;
        content: "珠峰培训";
    }
在上述的代码中我们发现，变量存储的值可以作为选择器，也可以作为样式属性名，同样也可以像类似于JS中字符串拼接的方式把变量值的和另外一个字符串进行拼接，
而且@@var是把var变量存储的值作为另外一个变量的名从而获取对应的值。还有一点值的我们注意的是，变量可以定在使用代码的下面，
这个有点类似于JS中的预解释，不管写在上面还是下面，都是相当于全局的变量，并且都可以把存储值获取到(但是建议大家把变量都统一在最上面定义)。

Mixin混合
1、基本使用
从字面意思上理解，所谓的混合其实应该是把很多的样式混合在一起，这样理解不准确，个人的理解，所谓的混合其实是把某个选择器中的样式拿过来使用，
我们看下面的代码。


    //->LESS代码
    .public {
        width: 100px;
        height: 100px;
    }

    nav ul {
        .public;
        list-style: none;
    }

    //->编译为CSS的结果
    .public {
        width: 100px;
        height: 100px;
    }

    nav ul {
        width: 100px;
        height: 100px;
        list-style: none;
    }
观察上述的代码，我们发现其实nav ul是把public中设定的样式属性值copy了一份到自己的样式中。如果你想在编译完成的结果中不输出public这个样式的结果，
只需要按照下述的代码编写即可：


    //->LESS代码
    .public() {//->在选择器后面加上()就可以不编译这个样式了
        width: 100px;
        height: 100px;
    }

    nav ul {
        .public;
        list-style: none;
    }

    //->编译为CSS的结果
    nav ul {
        width: 100px;
        height: 100px;
        list-style: none;
    }
2、Extend
虽然在上述的案例中，nav ul把public中的样式继承了过来，但是原理却是把代码copy一份过来，这样编译后的CSS中依然会存留大量的冗余CSS代码，
为了避免这一点，我们可以使用extend伪类来实现样式的继承使用。
    //->LESS代码
    .public {
        width: 100px;
        height: 100px;
    }
    nav ul {
        &:extend(.public);
        list-style: none;
    }
    //->编译为CSS的结果
    .public, nav ul {
        width: 100px;
        height: 100px;
    }
    nav ul {
        list-style: none;
    }
或者：
    //->LESS代码
    .public {
        width: 100px;
        height: 100px;
    }

    nav ul:extend(.public) {
        list-style: none;
    }
    //->编译为CSS的结果和第一种写法一样
3、命名空间和作用域
在LESS的语法中，我们可以指定命名空间，实现在一个盒子中层级嵌套式的编写。下面案例中，.box就是命名空间，里面的img、.gray都是这个空间下的样式，
调取的话需要.box > .gray。


    //->LESS代码
    .box {
        width: 100px;
        height: 100px;
        img {
            width: 100%;
            height: 100%;
        }
        .gray {
            color: #eee;
        }
        &:hover {
            background: green;
        }
    }

    #nav {
        .box;
    }

    #header {
        .box > .gray;
    }

    //->编译为CSS的结果
    .box {
        width: 100px;
        height: 100px;
    }

    .box img {
        width: 100%;
        height: 100%;
    }

    .box .gray {
        color: #eee;
    }

    .box:hover {
        background: green;
    }

    #nav {
        width: 100px;
        height: 100px;
    }

    #nav img {
        width: 100%;
        height: 100%;
    }

    #nav .gray {
        color: #eee;
    }

    #nav:hover {
        background: green;
    }

    #header {
        color: #eee;
    }
在LESS中定义了命名空间就创建了一个私有的作用域，在这个私有作用域中使用的变量都是先看一下自己作用域中有没有，
没有的话，在向上一级查找（类似于JS的作用域链）。


    //->LESS代码
    @color: #ccc;
    .box {
        @color: #eee;
        .gray {
            color: @color;
        }
    }

    .box2 {
        .gray {
            color: @color;
        }
    }

    //->编译为CSS的结果
    .box .gray {
        color: #eee;
    }

    .box2 .gray {
        color: #ccc;
    }
4、!important
在调用的混合集后面追加 !important 关键字，可以使混合集里面的所有属性都继承 !important:


    //->LESS代码
    @color: #ccc;
    .box {
      @color: #eee;
      .gray {
        color: @color;
      }
    }

    nav ul {
      .box !important;
    }

    //->编译为CSS的结果
    .box .gray {
        color: #eee;
    }

    nav ul .gray {
        color: #eee !important;
    }
5、Parametric Mixins
如同JS一样，LESS也可以向函数一样设定形参数，这个技巧在我们的项目中会被经常的使用到，例如：处理CSS3的兼容问题


    //->LESS代码
    .transition(@property:all;@duration:1s;@function:linear;@delay:0s;) {
      -webkit-transition: @property @duration @function @delay;
      -moz-transition: @property @duration @function @delay;
      -ms-transition: @property @duration @function @delay;
      -o-transition: @property @duration @function @delay;
      transition: @property @duration @function @delay;
    }

    .box1 {
      .transition;
    }

    .box2 {
      .transition(@duration: 2s);
    }

    .box3 {
      .transition(@duration: 2s; @property: width;);
    }

    //->编译为CSS的结果
    .box1 {
        -webkit-transition: all 1s linear 0s;
        -moz-transition: all 1s linear 0s;
        -ms-transition: all 1s linear 0s;
        -o-transition: all 1s linear 0s;
        transition: all 1s linear 0s;
    }

    .box2 {
        -webkit-transition: all 2s linear 0s;
        -moz-transition: all 2s linear 0s;
        -ms-transition: all 2s linear 0s;
        -o-transition: all 2s linear 0s;
        transition: all 2s linear 0s;
    }

    .box3 {
        -webkit-transition: width 2s linear 0s;
        -moz-transition: width 2s linear 0s;
        -ms-transition: width 2s linear 0s;
        -o-transition: width 2s linear 0s;
        transition: width 2s linear 0s;
    }
此外我们需要值得注意的是，LESS中也有arguments。


    //->LESS代码
    .transition(@property:all;@duration:1s;@function:linear;@delay:0s;) {
      -webkit-transition: @arguments;
      transition: @arguments;
    }

    .box1 {
      .transition;
    }

    //->编译为CSS的结果
    .box1 {
        -webkit-transition: all 1s linear 0s;
        transition: all 1s linear 0s;
    }
我们还可以把我们的变量像JS的函数一样操作，不仅仅有参数，还有返回值。


    //->LESS代码
    .average(@x, @y) {
      @result: ((@x + @y) / 2);
    }

    div {
      .average(16px, 50px); //"call" the mixin
      padding: @result; //use its "return" value
    }

    //->编译为CSS的结果
    div {
        padding: 33px;
    }
6、Mixin Guards
我们可以在mixin中设置条件；常用的条件运算符：>、>=、<、<=、=；
我们设定的条件还可以使用IS函数：iscolor、isnumber、isstring、iskeyword、isurl、ispixel、ispercentage...


    //->LESS代码
    .mixin (@a) when (lightness(@a) >= 50%) {
      background-color: black;
    }

    .mixin (@a) when (lightness(@a) < 50%) {
      background-color: white;
    }

    .box1{
      .mixin(#ddd);
    }

    .box2{
      .mixin(#555);
    }

    //->编译为CSS的结果
    .box1 {
        background-color: black;
    }

    .box2 {
        background-color: white;
    }
when是在设置条件，除了像上面的写法外，我们还可以通过when设置多个条件，而且条件中可以使用is函数。


    //->LESS代码:使用IS函数
    .mixin (@a; @b: 0) when (isnumber(@b)) { ... }
    .mixin (@a; @b: black) when (iscolor(@b)) { ... }

    //->LESS代码:多条件，可以使用and或者逗号间隔
    .mixin (@a) when (isnumber(@a)) and (@a > 0) { ... }
    .mixin (@a) when (isnumber(@a)) , (@a > 0) { ... }
我们还可以通过与&特性结合实现'if'类型的语句。


    //->LESS代码:这里的意思是如果为true,.box的文字颜色才是白色
    @my-option: true;
    & when (@my-option = true) {
      .box {
        color: white;
      }
    }
Loops
在Less中，混合可以调用它自身。这样，当一个混合递归调用自己，再结合Guard条件表达式，就可以写出循环结构。
使用递归循环最常见的情况就是生成栅格系统的CSS：
    //->LESS代码
    .generate-columns(4);
    .generate-columns(@n, @i: 1) when (@i <= @n) {
      .column-@{i} {
        width: (@i * 100% / @n);
      }
      .generate-columns(@n, (@i + 1));
    }

    //->输出的CSS
    .column-1 {
        width: 25%;
    }

    .column-2 {
        width: 50%;
    }

    .column-3 {
        width: 75%;
    }

    .column-4 {
        width: 100%;
    }
Merge
Merge特性可以从多个属性中将值，集合到某一个样式属性的列表中（也就是多样式效果）。
在编写的时候，+代表以逗号分隔，+_代表多个之前以空格分隔。
    //->LESS代码
    .mixin() {
      box-shadow+: inset 0 0 10px #555;
    }

    .myclass {
      .mixin;
      box-shadow+: 0 0 20px black;
    }

    .mixin2() {
      transform+_: scale(2);
    }

    .myclass2 {
      .mixin2;
      transform+_: rotate(45deg);
    }

    //->输出的CSS
    .myclass {
        box-shadow: inset 0 0 10px #555, 0 0 20px black;
    }

    .myclass2 {
        transform: scale(2) rotate(45deg);
    }
Parent Selectors
&运算符其实就是让当前的选择器和父级选择器按照特定的规则进行连接，看下面的案例：
    //->LESS代码
    .box {
      color: blue;
      &:hover {
        color: green;
      }

      &-top {
        height: 30px;
      }

      &-center {
        height: 500px;
      }

      //->多个&&
      & + &-top {
        color: red;
      }

      & &-top {
        color: grey;
      }

      &&-top {
        color: black;
      }

      &, &-top {
        color: orange;
      }
    }

    //->输出的CSS
    .box {
        color: blue;
    }

    .box:hover {
        color: green;
    }

    .box-top {
        height: 30px;
    }

    .box-center {
        height: 500px;
    }

    .box + .box-top {
        color: red;
    }

    .box .box-top {
        color: grey;
    }

    .box.box-top {
        color: black;
    }

    .box, .box-top {
        color: orange;
    }
改变选择器顺序，下面的案例中，选择器.no-border-radius &会前置插入它的父选择器.header .menu，
最后变成.no-border-radius .header .menu形式输出：


    //->LESS代码
    .header {
      .menu {
        border-radius: 5px;
        .no-border-radius & {
          background-image: url('images/button-background.png');
        }
      }
    }

    //->输出的CSS
    .header .menu {
        border-radius: 5px;
    }

    .no-border-radius .header .menu {
        background-image: url('images/button-background.png');
    }
Import Directives
从其他样式表中导入样式。


    //->LESS代码
    @import "public.less";

    .box {
      &:after {
        .clear;
      }
    }

    //->输出的CSS:会把public中的样式也输出
    .clear {
        display: block;
        height: 0;
        content: "";
        clear: both;
        zoom: 1;
    }

    .box:after {
        display: block;
        height: 0;
        content: "";
        clear: both;
        zoom: 1;
    }
我们发现上述的操作虽然实现了调取使用，但是会把public中的less也编译到了自己的这个css中，
如果不想编译的话，我们需要配置一些参数：
    //->LESS代码
    @import (reference) "public.less";

    .box {
      &:after {
        .clear;
      }
    }

    //->输出的CSS:
    .box:after {
        display: block;
        height: 0;
        content: "";
        clear: both;
        zoom: 1;
    }
除了reference以外我们还可以配置一些其他的参数值： inline：在输出中包含源文件但不加工它 less：将文件作为Less文件对象，
无论是什么文件扩展名 css：将文件作为CSS文件对象，无论是什么文件扩展名
once：只包含文件一次（默认行为） multiple：包含文件多次
less基础语法：在css的基础上增加了大量的新的语言，编写方式，常用函数等，可以让我们的css想JS一样成为一门编程语言。
它包括变量，混合，嵌套规则，运算，作用域等。
首先下载less；查看less是否安装成功执行以下命令less-v；
编译less文件首先把<link rel="stylesheet">stylesheet后面加个 /less 然后引入需要编译的less文件，再引入less中的js文件。
把less文件编译为css文件需要在当前文件下shift+鼠标右键执行以下命令 lessc index.less index.css。想要压缩文件后面需要加上-x即可。

less的语法和基础编译

1： 定义变量@color:#000;
.box{
  color: @color;
}

2：less除了可以用变量存储公用的属性值外，还可以用变量存储公用的url,选择器等等如下：

.@{selector}{
  width: 100px;
  height: 100px;
  @{prorerty}:#000;
  background: url("@{bgImg}/test.png");
  &:after{
    display: block;
    content: @@var;
  }
}
@selector:box;
@bgImg:'../img';
@property:color;
@name:'珠峰';
@var:'name';
/*编译为css的结果为*/
.box{
  width: 100px;
  height: 100px;
  color: #000;
  background: url("../img/test.png");
}
.box:after{
  display: block;
  content: '珠峰';
}
3：混合：所谓的混合就是把某个选择器中的样式拿过来使用，以下实例
.public{
  width: 100px;
  height: 100px;
}
nav ul{
  .public;把这个样式中的代码克隆一份一模一样的拿过来使用；如果加上括号（）.public不会再编译了。只编译下面的一部分。
  list-style: none;
}
/*编译为css的结果为*/
.public{
  width: 100px;
  height: 100px;
}
nav ul{
  width: 100px;
  height: 100px;
  list-style: none;
}
示例
.public(){ 加上括号public不会在编译了如果不加他会把public编译出来。
width:100px;
height:100px;
}
.box{
.public;
}
编译css
.box{
width:100px;
height:100px;
}

.box{ &:extent(.public)继承 } === .box:extent(.public){}两种编译结果一样;使用extent后面.public的后面不能加括号。
------------------------------------------------------------------------------------------------------------

4：命名空间和作用域
@v:1;
.box{
  @v:10;私有作用域
  &:hover{
    z-index: @v;
  }
}
5：!important 在调用的混合集后面追加!important关键字，可以使混合集里面的所有属性都继承!important
@color:#ccc;
.box{
  @color: #eee;
  .gray{
    color: @color;
  }
}
nav ul{
  .box !important;
}
/*编译为css*/
.box .gray{
  color: #eee;
}
nav ul .gray{
  color: #eee !important;
}

6:我们的变量可以像JS中的函数一样操作，不仅有形参，还可以有返回值。
.avg(@x,@y){
  @result:((@x+@y)/2)
}
div{
  .avg(50px,30px);/*先执行.avg这个方法才能使用@result这个方法，因为@result是私有变量*/
  padding:@result;
}
/*编译css的结果*/
div{
  padding: 40px;
}


7:在less中可以支持条件判断
.public(@x)when(@x<10)and(@x>0){
  background: red;
}
.public(@x)when(@x<=0){
  background: green;
}
.public(@x)when(@x>=10){
  background: blue;
}
.box{
  .public(12)
}
在传统的CSS编写中，我们事先为一个盒子.box编写了一套样式，当鼠标滑过的时候，
让盒子在原有样式的部分颜色值上发生改变，里面的DIV标签的阴影颜色变重，
这样的话我们需要把之前的样式拿过来写一遍，只是调整一下透明度或者颜色值而已，
页面中的冗余代码比较的多，也不方便后期的维护。

.box {
    color: #f938ab;
    border-color: #fdcdea;
}

.box1 div {
    -webkit-box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
}      //->在:hover触发的时候需要把上述的样式copy一份,在原来的基础上改变部分颜色值和透明度
.box:hover {
    color: #fe33ac;
}

.box:hover div {
    -webkit-box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
}
如果我们使用的是LESS，那么我们可以节省很多的工作，也可以实现可扩展性和通用性，看下面的LESS代码：

//->定义变量存储颜色值     @color: #f938ab;
//->你可以把它理解为JS中的一个函数
.box-shadow(@style, @alpha:50%) {
    -webkit-box-shadow: @style rgba(0, 0, 0, @alpha);
    -moz-box-shadow: @style rgba(0, 0, 0, @alpha);
    -ms-box-shadow: @style rgba(0, 0, 0, @alpha);
    -o-box-shadow: @style rgba(0, 0, 0, @alpha);
    box-shadow: @style rgba(0, 0, 0, @alpha);
}

.box {
    color: @color;
    border-color: #fdcdea;
    //->嵌套: 代表是 .box div
    div {
      .box-shadow(0 0 5px, 30%);
    }
    //->代表的是 .box:hover
        &:hover {
            //->saturate: LESS提供的颜色处理方法(还有很多其它的方法),用来调整颜色的饱和度变化
          color: saturate(@color, 5%);
            //->嵌套: 代表是 .box:hover div
                           div {
                            .box-shadow(0 0 5px);
                            }
        }
}
通过NODE编译后的结果为：
.box {
    color: #f938ab;
    border-color: #fdcdea;
}

.box div {
    -webkit-box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
    -moz-box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
    -ms-box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
    -o-box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
}

.box:hover {
    color: #fe33ac;
}

.box:hover div {
    -webkit-box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
    -moz-box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
    -ms-box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
    -o-box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
}
大家感受一下，是不是感觉LESS很强大，一方面不仅仅让我们少些了很多的代码，而且我们定义的变量或者“函数”具有很强的公用性，
以后其他的结构需要这样的样式，我们直接的调取就好了。既然认识到了LESS的强大，那么我们接下来就一步步的学会LESS的使用。

LESS的编译
上述我们提到，编写完成的LESS代码是不能直接在浏览器中运行的，需要编译成正常的CSS代码。那么我们首先就来学习一下常用的LESS编译方式。

1、在浏览器中调用LESS.JS
LESS只支持在现代浏览器中运行（最新版本的Chrome, Firefox, Safari 和 IE）。我们不建议在生产环境中使用LESS客户端，
因为在将LESS编译成CSS的时候，用户会看到加载延迟的现象，即便在浏览器中有不足一秒的加载延迟，但也会降低性能。

首先引入我们设置样式的LESS文件，注意：这里的rel=’stylesheet/less’

     <link type="text/css" rel="stylesheet/less" href="1.less"/>
其次为了方便开发过程中的调试(上线后我们也可以配置一些必要的参数)，我们可以在引入LESS.JS之前设置一些配置的参数。
我们一般都把所有的配置参数放在全局变量less中。

//->在引入LESS之前设置一个全局的变量less,配置一些参数值(根据情况自行选择需要配置的项)
var less = {
    //->evn:设置运行的环境(生产模式还是开发模式)
    //production:编译后的CSS缓存到本地localStorage中
    //development:没有把编译后的CSS缓存到本地,在URL不是标准的格式下(例如:file://...),自动设置为development
    env: "development",
     //->logLevel:javascript控制台日志量
     logLevel: 2,
     //->async:同步或者异步导入文件,默认是false代表同步
     async: false,
     //->fileAsync:使用文件协议访问页面时异步加载导入的文件,默认是false,如有需要设置为true
     fileAsync: false,
     //->poll:在监视模式下，每两次请求之间的时间间隔(ms)
     poll: 1000,
     //->dumpLineNumbers:当设置dumpLineNumbers直接输出源行信息到编译好的CSS的文件中时，有利于你调试指定行。
     comments参数用于输出用户可以理解的内容，而mediaQuery使用Firefox一个扩展来解析CSS和抽取信息。
     dumpLineNumbers: "comments",
     //->relativeUrls：是否调整相对路径。如果为false，则url已经是相对于入口的LESS文件。
     relativeUrls: false
};     //->还有其它的参数,自己下去后可以再进行扩展
然后引入我们的less.js
     <script type="text/javascript" src="less.js"> </script>
最后开启监视模式后,只要我们的LESS改变，在一定时间内，浏览器就会重新的编译，我们可以看到想要的效果

     //->启用监视模式(env必须要设置成development)
     less.watch();
2、使用NODE命令编译LESS
这种方式是目前项目中最常用的方式，也是我推荐大家使用的方式，它是把我们的LESS文件编译成CSS文件，我们项目中直接的引入CSS文件即可，
基本步骤：安装->编译/压缩编译->或者使用NODE代码实现批量编译等

把LESS模块安装到全局NODE环境中
     npm install less -g
使用命令进行编译
     //->把styles.less文件编译成styles.css文件(如果没有这个CSS文件自己会创建)
     lessc styles.less styles.css      //->编译完成的CSS文件是经过压缩的
     lessc styles.less styles.min.css -x或者--compress
如果你想要更牛X的压缩,还可以自己单独的设定,下面我们使用–clean-css。这个需要提前的安装less-plugin-clean-css模块才可以。

     //->安装less-plugin-clean-css
     npm install -g less-plugin-clean-css
     //->安装成功后就可以使用它压缩了
     lessc --clean-css styles.less styles.min.css
3、在NODE环境中编写批量编译的代码
我们在上述用NODE命令编译的时候，一次只能编译一个文件，这样，如果页面中有多个LESS，每一次编译都是比较耗费时间的，
所以我们结合NODE的FS文件读写操作，可以写一套批量编译的代码。

//->定义编译文件目录和目标导出目录
var dirPath = "./less/", tarPath = "./css/";
//->导入NODE中需要使用的模块
var fs = require("fs"),
    less = require("less");
//->读取dirPath中的所有文件,检查文件的类型,只有LESS文件我们才进行存储
var ary = [],
files = fs.readdirSync(dirPath);
files.forEach(function (file, index) {
    /\.(LESS)/i.test(file) ? ary.push(file) : null;
});
//->把目录下的所有文件进行编译,把编译完成的结果保存在指定的目录中
ary.forEach(function (file) {
    var newFile = file.replace(".less", ".css"),
    conFile = fs.readFileSync(dirPath + file, "utf-8");
less.render(conFile, {compress: true}, function (error, output) {
    fs.writeFileSync(tarPath + newFile, output.css, "utf-8");
    });
});